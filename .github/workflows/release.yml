name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app
      run: npm run build
      
    - name: Build Electron app (Windows)
      if: matrix.os == 'windows-latest'
      run: npm run dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Electron app (macOS)
      if: matrix.os == 'macos-latest'
      run: npm run dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        
    - name: Build Electron app (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: npm run dist
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: |
          dist/*.exe
          dist/*.msi
          
    - name: Upload artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-build
        path: |
          dist/*.dmg
          dist/*.zip
          
    - name: Upload artifacts (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: |
          dist/*.AppImage
          dist/*.deb

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Trading Genome ${{ github.ref_name }}
        body: |
          ## Trading Genome ${{ github.ref_name }}
          
          ### ðŸ“± Desktop Application
          A comprehensive trading analysis system with real-time charting, technical indicators, and data management.
          
          ### ðŸš€ Features
          - Real-time trading charts with Lightweight Charts
          - Technical indicators (RSI, SMA, EMA, MACD, etc.)
          - Command palette for quick navigation (Ctrl+P, Ctrl+I)
          - Symbol and indicator management
          - CSV data import with metadata
          - Dark theme UI with glassmorphism effects
          - IndexedDB persistence for user preferences
          
          ### ðŸ’» Download Options
          
          **Windows:**
          - `.exe` - Installer version
          - `.exe` (portable) - Portable version (no installation required)
          
          **macOS:**
          - `.dmg` - Disk image for installation
          - `.zip` - Archive version
          
          **Linux:**
          - `.AppImage` - Portable application (recommended)
          - `.deb` - Debian package
          
          ### ðŸ”§ Installation
          1. Download the appropriate file for your operating system
          2. Run the installer or extract the portable version
          3. Launch the application
          
          ### ðŸ“Š Usage
          - Press `Ctrl+P` to search and switch symbols
          - Press `Ctrl+I` to add technical indicators
          - Hover over candles to see OHLC data
          - Use the indicator panel to manage active indicators
        draft: false
        prerelease: false
        
    - name: Upload Windows Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-build/Trading Genome Setup 1.0.0.exe
        asset_name: TradingGenome-Windows-Setup.exe
        asset_content_type: application/octet-stream
        
    - name: Upload Windows Portable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./windows-build/Trading Genome 1.0.0.exe
        asset_name: TradingGenome-Windows-Portable.exe
        asset_content_type: application/octet-stream
        
    - name: Upload macOS DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-build/Trading Genome-1.0.0.dmg
        asset_name: TradingGenome-macOS.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload macOS ZIP
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./macos-build/Trading Genome-1.0.0-mac.zip
        asset_name: TradingGenome-macOS.zip
        asset_content_type: application/zip
        
    - name: Upload Linux AppImage
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-build/Trading Genome-1.0.0.AppImage
        asset_name: TradingGenome-Linux.AppImage
        asset_content_type: application/octet-stream
        
    - name: Upload Linux DEB
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux-build/trading-genome_1.0.0_amd64.deb
        asset_name: TradingGenome-Linux.deb
        asset_content_type: application/octet-stream